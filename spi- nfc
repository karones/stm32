//spi pa 5-6-7
//если поднести карточку загорится диод. тестирую
#include "stm32f10x.h"
#include "stm32f10x_gpio.h"
#include "stm32f10x_rcc.h"
#include "stm32f10x_spi.h"
 

void Delay(void){
volatile uint32_t i;
for (i=0; i != 0x80000; i++);
}


int main(void) {

  RCC_APB2PeriphClockCmd(RCC_APB2Periph_SPI1, ENABLE);
  RCC->APB2ENR |= (RCC_APB2Periph_GPIOC|RCC_APB2Periph_GPIOA|);
  //Настроим ножки со светодиодами как выходы
  GPIOC->CRH |=0x33;
  GPIOC->CRH &= ~0xCC;
 GPIOA->CRL |= 0x04; //mode в 00
  GPIOA->CRL &= ~0x11; //0xb;

    //Заполняем структуру с параметрами SPI модуля
  SPI_InitStructure.SPI_Direction = SPI_Direction_2Lines_FullDuplex; //полный дуплекс
  SPI_InitStructure.SPI_DataSize = SPI_DataSize_8b; // передаем по 8 бит
  SPI_InitStructure.SPI_CPOL = SPI_CPOL_Low; // Полярность и
  SPI_InitStructure.SPI_CPHA = SPI_CPHA_1Edge; // фаза тактового сигнала
  SPI_InitStructure.SPI_NSS = SPI_NSS_Hard; // Управлять состоянием сигнала NSS аппаратно
  SPI_InitStructure.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_32; // Предделитель SCK
  SPI_InitStructure.SPI_FirstBit = SPI_FirstBit_MSB; // Первым отправляется старший бит
  SPI_InitStructure.SPI_Mode = SPI_Mode_Slave; // Режим - слейв
  SPI_Init(SPI1, &SPI_InitStructure); //Настраиваем SPI1
  SPI_I2S_ITConfig(SPI1,SPI_I2S_IT_RXNE,ENABLE); //Включаем прерывание по приему байта
  SPI_Cmd(SPI1, ENABLE); // Включаем модуль SPI1....
  NVIC_EnableIRQ(SPI1_IRQn); //Разрешаем прерывания от SPI1	


 while(1) {
    // все работает на прерываниях
  }
}
 
//Обработчик прерываний от SPI1
 
void SPI1_IRQHandler (void) {
  if (SPI_I2S_GetFlagStatus(SPI1,SPI_I2S_FLAG_RXNE)==SET) {
    // Прерывание вызвано приемом байта ?
    uint8_t data = SPI1->DR; //Читаем то что пришло
    GPIOC->BSRR=(GPIO_BSRR_BS8);
	Delay();
	GPIOC->BSRR=(GPIO_BSRR_BR8);
   /* SPI1->DR = data; //И отправляем обратно то что приняли */
  }
}
