#include "stm32f4xx.h"

TIM_OCInitTypeDef  TIM_OCInitStructure;

//uint16_t PrescalerValue = 0;
int pol; //0=100; 1=400;
void TIM_Config(void);


int main(void)
{


  /* TIM Configuration */
  TIM_Config();

  RCC_TIMCLKPresConfig(RCC_TIMPrescActivated);

  /* Compute the prescaler value */
  PrescalerValue = (uint16_t) (SystemCoreClock / 21000000) - 1;

  /* Time base configuration */
  RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM4, ENABLE);
    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);

    GPIO_InitTypeDef gpio;
    gpio.GPIO_Pin = GPIO_Pin_12 | GPIO_Pin_13;
    gpio.GPIO_OType = GPIO_OType_PP;
    gpio.GPIO_Mode = GPIO_Mode_AF;
    gpio.GPIO_Speed = GPIO_Speed_100MHz;

    GPIO_Init(GPIOD, &gpio);
    GPIO_PinAFConfig(GPIOD, GPIO_PinSource12, GPIO_AF_TIM4);
    GPIO_PinAFConfig(GPIOD, GPIO_PinSource13, GPIO_AF_TIM4);
    GPIO_InitTypeDef button;

 //------------------прерывание

    button.GPIO_Mode=GPIO_Mode_IN;
    button.GPIO_PuPd = GPIO_PuPd_NOPULL; // Без подтяжки
    button.GPIO_Speed = GPIO_Speed_2MHz; // Скорость низкая
    button.GPIO_Pin = GPIO_Pin_0;
    SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOA,EXTI_PinSource0);
EXTI_InitTypeDef exti; // структура для настроки
exti.EXTI_Line = EXTI_Line0; /// кнопка на линии 0
exti.EXTI_Mode = EXTI_Mode_Interrupt; // прерывание (а не событие)
exti.EXTI_Trigger = EXTI_Trigger_Rising; // срабатываем по переднему фронту импульса
exti.EXTI_LineCmd = ENABLE; /// вкл
EXTI_Init(&exti);
NVIC_InitTypeDef nvic;
nvic.NVIC_IRQChannel = EXTI0_IRQn; // указываем канал IRQ
nvic.NVIC_IRQChannelPreemptionPriority = 2; // приоритет канала ( 0 (самый приоритетный) - 15)
nvic.NVIC_IRQChannelSubPriority = 2; // приоритет подгруппы
nvic.NVIC_IRQChannelCmd = ENABLE;
NVIC_Init(&nvic);
//-------------------------прерывание кончились
    TIM_TimeBaseInitTypeDef timer;
    TIM_TimeBaseStructInit(&timer);
    timer.TIM_Prescaler = 800 - 1;
    timer.TIM_Period = 2000;
    TIM_TimeBaseInit(TIM4, &timer);

    TIM_OCInitTypeDef channel;
    channel.TIM_OCMode = TIM_OCMode_PWM1;
    channel.TIM_OutputState = TIM_OutputState_Enable;
    channel.TIM_Pulse = 100;
    channel.TIM_OCPolarity = TIM_OCPolarity_High;
    TIM_OC1Init(TIM4, &channel);
    TIM_OC1PreloadConfig(TIM4, TIM_OCPreload_Enable);
    TIM_OCInitTypeDef channe2;
       channe2.TIM_OCMode = TIM_OCMode_PWM1;
       channe2.TIM_OutputState = TIM_OutputState_Enable;
       channe2.TIM_Pulse = 100;
       channe2.TIM_OCPolarity = TIM_OCPolarity_High;
       TIM_OC2Init(TIM4, &channe2);

    TIM_CtrlPWMOutputs(TIM4, ENABLE);
    TIM_Cmd(TIM4, ENABLE);

    TIM_SetCompare1(TIM4, 350); //так менять скважность
int i;
  while (1)
  {

  }
}

/**
  * @brief  Configure the TIM4 Ouput Channels.
  * @param  None
  * @retval None
  */
void Delays(void){
	volatile uint32_t i;
	for (i=0; i != 0x800000; i++);
}

void EXTI0_IRQHandler(void)
{
    if (pol==0)
        {
            pol=1;
            	TIM_SetCompare1(TIM4, 390);
	  		TIM_SetCompare2(TIM4, 390);

        }else{
            pol=0;
            TIM_SetCompare1(TIM4, 100);
	  		TIM_SetCompare2(TIM4, 100);
        }

}


void TIM_Config(void)
{
  GPIO_InitTypeDef GPIO_InitStructure;

  /* TIM4 clock enable */
  RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM4, ENABLE);

  /* GPIOD clock enable */
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);

  /* GPIOD Configuration: TIM4 CH1 (PD12), TIM4 CH2 (PD13), TIM4 CH3 (PD14) and TIM4 CH4 (PD15) */
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_12 | GPIO_Pin_13;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP ;
  GPIO_Init(GPIOD, &GPIO_InitStructure);

  /* Connect TIM4 pins to AF2 */
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource12, GPIO_AF_TIM4);
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource13, GPIO_AF_TIM4);

}

