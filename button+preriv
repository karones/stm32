#include <stm32f4xx_rcc.h>
#include<stm32f4xx_gpio.h>
#include "stm32f4xx.h"
//#include <stm32f429i_discovery_l3gd20.h>
#include "stm32f4xx.h"
#include <stdio.h>
#include "main.h"
#include "stm32f4xx_it.h"
#include <misc.h>
float Buffer[6];
float Gyro[3];
float X_BiasError, Y_BiasError, Z_BiasError = 0.0;
uint8_t Xval, Yval = 0x00;


void Delays(void){
	volatile uint32_t i;
	for (i=0; i != 0x800000; i++);
}

int main(void)
{
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD|RCC_AHB1Periph_GPIOA, ENABLE);
GPIO_InitTypeDef  ledinit;  // создаем структуру
GPIO_InitTypeDef button;
ledinit.GPIO_Mode = GPIO_Mode_OUT;  // направление - выход
ledinit.GPIO_OType = GPIO_OType_PP;  // Двухтактный выход
ledinit.GPIO_PuPd = GPIO_PuPd_NOPULL;  // Без подтяжки
ledinit.GPIO_Speed = GPIO_Speed_2MHz;  // Скорость низкая
ledinit.GPIO_Pin = GPIO_Pin_12;
ledinit.GPIO_Pin = GPIO_Pin_8;// 
GPIO_Init(GPIOD, &ledinit);
button.GPIO_Mode=GPIO_Mode_IN;
button.GPIO_PuPd = GPIO_PuPd_NOPULL;  // Без подтяжки
button.GPIO_Speed = GPIO_Speed_2MHz;  // Скорость низкая
button.GPIO_Pin = GPIO_Pin_0;

// Включаем светодиод
//GPIO_SetBits(GPIOD, GPIO_Pin_12);

//Прерывания - это альтернативная функция порта
SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOA,EXTI_PinSource0);
EXTI_InitTypeDef exti;  // структура для настроки
exti.EXTI_Line = EXTI_Line0;    /// кнопка на линии 0
exti.EXTI_Mode = EXTI_Mode_Interrupt;    // прерывание (а не событие)
exti.EXTI_Trigger = EXTI_Trigger_Rising;  // срабатываем по переднему фронту импульса
exti.EXTI_LineCmd = ENABLE;    /// вкл

EXTI_Init(&exti);

NVIC_InitTypeDef nvic;
nvic.NVIC_IRQChannel = EXTI0_IRQn;  // указываем канал IRQ
nvic.NVIC_IRQChannelPreemptionPriority = 2;  // приоритет канала ( 0 (самый приоритетный) - 15)
nvic.NVIC_IRQChannelSubPriority = 2;  // приоритет подгруппы
nvic.NVIC_IRQChannelCmd = ENABLE;

NVIC_Init(&nvic);

// Теперь выключаем светодиод
//GPIO_ResetBits(GPIOD, GPIO_Pin_15);




while(1)
{

}

  // Функция, выполняющая настройку портов

}
void EXTI0_IRQHandler(void)
{
	if ((GPIOA->IDR & 0x01)==0x01) {
			GPIO_SetBits(GPIOD, GPIO_Pin_8);
			Delays();
			GPIO_ResetBits(GPIOD, GPIO_Pin_8);

		}
}

